-- 2020-12-30 DBMS_07.DDL_DML   ⓒcherryuki(ji)
-- [VII] DDL, DML, DCL
-- SQL = DDL(테이블 생성, 삭제, 구조변경, 테이블 데이터 제거)
    --  +DML(SELECT, INSERT, UPDATE, DELETE)
    --  +DCL(사용자 계정 생성, 사용자 권한 부여, 권한 박탈, 트랜잭션 명령어)
    
-- ★ 01. DDL ★ --
-- 1) 테이블 생성 (CREATE TABLE)
-- CREATE TABLE 테이블명(칼럼명 데이터_타입, ...);
CREATE TABLE BOOK(
    BOOKID      NUMBER(4),    --도서번호
    BOOKNAME    VARCHAR2(20), --도서명
    PUBLISHER   VARCHAR2(20), --출판사
    RDATE       DATE,         --출판일
    PRICE       NUMBER(8),    --가격
    PRIMARY KEY(BOOKID)       --테이블 내 주키(PRIMARY KEY); 유일한 필드, NOT NULL
    );
DROP TABLE BOOK; -- BOOK 테이블 삭제
CREATE TABLE BOOK(
    BOOKID      NUMBER(4)       PRIMARY KEY,
    BOOKNAME    VARCHAR2(20)    NOT NULL,
    PUBLISHER   VARCHAR2(20),
    RDATE       DATE,
    PRICE       NUMBER(8)
    );
SELECT * FROM BOOK;

-- 데이터형(문자형, 숫자형, 날짜형)
-- VARCHAR2(N); 최소 크기:1, 최대크기:N (최대 2000BYTES 까지 가능)
-- NUMBER(W); 최대크기:W (최대 38자리)
-- DATE

-- EMP와 유사한 EMP01: EMPNO(숫자4), ENAME(문자20), SAL(숫자7,2)
CREATE TABLE EMP01(
    EMPNO   NUMBER(4),
    ENAME   VARCHAR2(20),
    SAL     NUMBER(7,2)
    );
SELECT * FROM EMP01;
DESC EMP01;

-- DEPT와 유사한 DEPT01: DEPTNO(숫자2), DNAME(문자14), LOC(문자13)
CREATE TABLE DEPT01(
    DEPTNO  NUMBER(2),
    DNAME   VARCHAR2(14),
    LOC     VARCHAR2(13)
    );
SELECT * FROM DEPT01;
DESC DEPT01;

-- 서브쿼리를 이용한 테이블 생성
CREATE TABLE EMP02
    AS
    SELECT * FROM EMP; --서브쿼리 결과만 EMP02테이블로 생성(제약조건 미포함)
SELECT * FROM EMP02;
DESC EMP02;
INSERT INTO EMP02 (EMPNO, ENAME, DEPTNO) VALUES (7369, 'KONG', 90); --제약조건 미포함이므로 가능
-- EMP03; EMP 테이블에서 EMPNO, ENAME, DEPTNO만 추출
CREATE TABLE EMP03
    AS
    SELECT EMPNO, ENAME, DEPTNO FROM EMP;
SELECT * FROM EMP03;
-- EMP04; EMP 테이블에서 10번 부서만 추출
CREATE TABLE EMP04
    AS
    SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP04;
-- EMP05; EMP 테이블의 구조만 추출
CREATE TABLE EMP05
    AS
    SELECT * FROM EMP WHERE 1=0; --무조건 거짓인 조건을 입력하면 구조만 추출
                                -- (무조건 참인 조건입력시(=조건 생략시) 데이터까지 모두 가져옴)
SELECT * FROM EMP05;

-- 2) 테이블 구조 변경(ALTER TABLE); ADD, MODIFY, DROP
-- ALTER TABLE 테이블명
-- ADD || MODIFY || DROP (필드명, 필드 타입, ...);
SELECT * FROM EMP03;
-- (1) 필드 추가(ADD)
ALTER TABLE EMP03 ADD (JOB VARCHAR2(10), SAL NUMBER(7,2)); 
SELECT * FROM EMP03; --이미 데이터가 있는 테이블에 칼럼(필드) 추가시 데이터에 NULL값 들어감
ALTER TABLE EMP03 ADD (MGR NUMBER(4));
-- (2) 필드 타입 수정(MODIFY)
ALTER TABLE EMP03 MODIFY (EMPNO VARCHAR2(5)); -- 숫자 데이터 있는 상태라 바꿀 수 없음
ALTER TABLE EMP03 MODIFY (JOB VARCHAR2(5)); --NULL만 있으면 다 바꿀 수 있음
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(200));
ALTER TABLE EMP03 MODIFY (ENMAE VARCHAR2(5)); --5BYTE 초과 데이터 보유 중이라 수정 불가능
-- (3) 필드 삭제(DROP)
ALTER TABLE EMP03 DROP COLUMN JOB; --NULL만 있던 칼럼 삭제
SELECT * FROM EMP03;
ALTER TABLE EMP03 DROP COLUMN DEPTNO; -- 데이터 보유 중이던 칼럼 삭제 -> 데이터 복구 불가
-- <데이터 보유 중인 칼럼 삭제시>
-- 논리적으로 특정 필드를 접근 못하도록 (낮, 데이터 사용하는 사람이 많은 시간대)
ALTER TABLE EMP03 SET UNUSED(SAL);
SELECT * FROM EMP03; -- 필드 접근 불가 상태
-- 논리적으로 접근 불가했던 필드를 삭제 (새벽, 데이터 사용하는 사람이 없거나 적은 시간대)
ALTER TABLE EMP03 DROP UNUSED COLUMNS; --필드 물리적 삭제시 테이블 액세스 불가

-- 3) 테이블 삭제(DROP TABLE)
SELECT * FROM EMP01;
DROP TABLE EMP01;
DROP TABLE DEPT; --DEPT테이블의 데이터를 참조하는 테이블(EMP)이 있으므로 삭제 불가
-- 다른 테이블에서 참조하는 데이터가 있을 경우 DROP 불가

-- 4) 테이블 내 데이터 전부 제거(TRUNCATE TABLE)
SELECT * FROM TAB;
SELECT * FROM EMP02;
TRUNCATE TABLE EMP02; --구조만 남음, DDL 명령어는 취소 불가(데이터 복구 불가)

-- 5) 테이블 이름 변경(RENAME)
SELECT * FROM EMP03;
RENAME EMP03 TO EMP3; --EMP03을 EMP3으로 이름 변경
SELECT * FROM EMP3;

-- 6) 데이터 딕셔너리(접근 불가)와 데이터 딕셔너리 뷰(사용자 접근용)
    -- DBA_TABLES, DBA_INDEXES, DBA_CONSTRAINTS, DBA_VIEWS;     (관리자)
    -- USER_TABLES, USER_INDEXES, USER_CONSTRAINTS, USER_VIEWS; (사용자)
    -- ALL_TABLES, ALL_INDEXES, ALL_CONSTRAINTS, ALL_VIEWS;
-- USER_XXX; 사용자가 소유한 객체(테이블, 인덱스, ...) 정보조회
SHOW USER; -- 현재 SCOTT
SELECT * FROM USER_TABLES;
SELECT TABLE_NAME FROM USER_TABLES;
SELECT * FROM USER_INDEXES;
SELECT * FROM USER_CONSTRAINTS; --P: PRIMARY KEY, R: REFERENXE, C: NOT NULL
SELECT * FROM USER_VIEWS;
DESC BOOK;
-- DBA_XXX; DBA 권한을 가진 사용자(=관리자)만 접근 가능한 객체 정보
SELECT * FROM DBA_TABLES;
SELECT TABLE_NAME, OWNER FROM DBA_TABLES;
SELECT * FROM DBA_INDEXES;
SELECT * FROM DBA_CONSTRAINTS;
SELECT * FROM DBA_VIEWS;
-- ALL_XXX; 현 계정(SCOTT)이 소유한 객체나 권한이 부여된 객체 정보
SELECT * FROM ALL_TABLES;
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_INDEXES;
SELECT * FROM ALL_VIEWS;

-- ★ 02. DML ★ --
-- 7) DML; SELECT, INSERT, UPDATE, DELETE
-- (1) INSERT INTO 테이블명 (필드명1, 필드명2, ..) VALUES (값1, 값2, ...); -- 필드명1에 값1, 필드명2에 값2 (순서 지켜야 함)
-- INSERT INTO 테이블명 VALUES (값1, 값2, ...); 필드명 순서대로 데이터 들어감
SELECT * FROM DEPT01;
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (10, 'ACCOUNGTING', 'NEW YORK');
INSERT INTO DEPT01 (DNAME, LOC, DEPTNO) VALUES ('SALES', 'BOSTON', 20);
-- NULL 값 입력은 NULL을 입력하거나 데이터를 입력하지 않으면 NULL이 자동 입력
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (30, 'IT', NULL);
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES (40, 'OPERATION');
-- INSERT문에서 필드명 생략시 반드시 모든 필드 값 입력해야 함
INSERT INTO DEPT01 VALUES (50, 'RESEARCH', 'TORONTO');
DESC DEPT01; --주키(PK)없는 DEPT01
-- DEPT01 테이블에 DEPT테이블 10~30번 부서까지 내용을 INSERT
INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO<40;
SELECT * FROM DEPT01 ORDER BY DEPTNO;
-- BOOK 테이블에 100번, 'MEDICAL', 'POOH', 출판일 오늘, 가격 13000원 삽입
INSERT INTO BOOK VALUES (100, 'MEDICAL', 'POOH', SYSDATE, 13000);
SELECT * FROM BOOK;
-- DML 명령어는 트랜잭션 단위로 진행
COMMIT; -- 현 트랜잭션의 작업을 반영
ROLLBACK; -- 트랜잭션 안에 있는 DML 명령어를 취소

DROP TABLE SAM01;
CREATE TABLE SAM01 (
    EMPNO   NUMBER(4) PRIMARY KEY,
    ENAME   VARCHAR2(10),
    JOB     VARCHAR2(9),
    SAL     NUMBER(7,2)
    );
SELECT * FROM SAM01;
INSERT INTO SAM01 VALUES (1000, 'APPLE', 'POLICE', 10000);
INSERT INTO SAM01 VALUES (1010, 'BANANA', 'NURSE', 15000);
INSERT INTO SAM01 VALUES (1020, 'ORANGE', 'DOCTOR', 25000);
INSERT INTO SAM01 (EMPNO, ENAME, SAL) VALUES (1030, 'VERY', 25000);
INSERT INTO SAM01 VALUES (1040, 'CAT', NULL, 2000);
INSERT INTO SAM01 SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE DEPTNO=10;

-- (2) UPDATE 테이블명 SET 필드명1=값1, 필드명2=값2,... [WHERE 조건];
DROP TABLE EMP01;
CREATE TABLE EMP01
    AS SELECT * FROM EMP;
SELECT * FROM EMP01;
-- 모든 직원의 급여를 10% 인상
UPDATE EMP01 SET SAL=SAL*1.1;
-- 부서번호 20번을 30으로 수정
UPDATE EMP01 SET DEPTNO=30 WHERE DEPTNO=20;
-- 특정 행의 데이터만 수정하고자 할 때는 WHERE절 추가
-- 10번 부서 직원의 입사일을 오늘로 수정하고, 부서번호는 30번 부서로 수정
UPDATE EMP01 SET HIREDATE=SYSDATE, DEPTNO=30 WHERE DEPTNO=10;
-- SAL이 3000이상인 사원만 급여를 10% 인상
UPDATE EMP01 SET SAL=SAL*1.1 WHERE SAL>=3000;
-- 'DALLAS'에 근무하는 직원들의 급여를 1000인상
UPDATE EMP01 SET SAL=SAL+1000 WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');

-- ★ 시험문제 예시 (손으로 직접 쓰기)
-- SCOTT사원의 부서번호는 20으로 JOB은 MANAGER로 수정하는 SQL
UPDATE EMP01 SET DEPTNO=20, JOB='MANAGER' WHERE ENAME='SCOTT';
-- SCOTT사원의 입사일을 오늘로, 급여는 500, 상여금은 400으로 수정
UPDATE EMP01 SET HIREDATE=SYSDATE, SAL=500, COMM=400 WHERE ENAME='SCOTT';
SELECT * FROM EMP01 WHERE ENAME='SCOTT';

-- 서브쿼리를 이용한 UPDATE문
SELECT * FROM DEPT01;
UPDATE DEPT01 SET LOC='SEOUL' WHERE DEPTNO=40;
-- DEPT01에서 20번 부서의 지역명을 40번 부서의 부서명, 지역명으로 변경
UPDATE DEPT01 SET DNAME=(SELECT DNAME FROM DEPT01 WHERE DEPTNO=40), LOC=(SELECT LOC FROM DEPT01 WHERE DEPTNO=40) WHERE DEPTNO=20;
UPDATE DEPT01 SET (DNAME, LOC) = (SELECT DNAME, LOC FROM DEPT01 WHERE DEPTNO=40) WHERE DEPTNO=20; --서브쿼리가 같을 경우 한 번에 바꾸는 것 가능
SELECT * FROM DEPT01 WHERE DEPTNO IN (20,40);
-- EMP01 테이블의 모든 사원의 급여와 입사일을 'KING'의 급여와 입사일로 수정
SELECT * FROM EMP01;
UPDATE EMP01 SET (SAL, HIREDATE) = (SELECT SAL, HIREDATE FROM EMP01 WHERE ENAME='KING');

-- cf) UPDATE 테이블명 SET 필드명=값, ...;
-- (3) DELETE FROM 테이블명 WHERE 조건; -- FROM 반드시 필요★
COMMIT;
SELECT * FROM EMP01;
DELETE FROM EMP01; -- 데이터 전부 삭제(구조 남아 있음)
ROLLBACK;
-- EMP01 테이블에서 30번 부서만 삭제
DELETE FROM EMP01 WHERE DEPTNO=30;
-- SAM01 테이블에서 JOB이 정해지지 않은 사원을 삭제
SELECT * FROM SAM01;
DELETE FROM SAM01 WHERE JOB IS NULL;
-- EMP01 테이블에서 부서명이 SALES인 사원을 삭제
SELECT * FROM EMP01;
DELETE FROM EMP01
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
-- EMP01 테이블에서 RESERCH 부서 소속이 사원 삭제
DELETE FROM EMP01
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');

-- PPT 1페이지 연습문제
--01. 테이블 생성
CREATE TABLE MY_DATA(
    ID      NUMBER(4),
    NAME    VARCHAR2(10),
    USERID  VARCHAR2(30),
    SALARY  NUMBER(10,2),
    PRIMARY KEY(ID)
    );
--02. 테이블에 데이터 입력
INSERT INTO MY_DATA VALUES(1, 'Scott', 'sscott', 10000.00);
INSERT INTO MY_DATA VALUES(2, 'Ford', 'fford', 13000.00);
INSERT INTO MY_DATA VALUES(3, 'Patel', 'ppatel', 33000.00);
INSERT INTO MY_DATA VALUES(4, 'Report', 'rreport', 23500.00);
INSERT INTO MY_DATA VALUES(5, 'Good', 'ggood', 44450.00);
--03. 자료 확인
SELECT * FROM MY_DATA;
SELECT ID, NAME, USERID, TO_CHAR(SALARY, '999,999.99') SALARY FROM MY_DATA;
--04. 자료를 영구적으로 DB에 등록
COMMIT;
--06. ID가 3번인 사람의 급여를 65,000.00으로 갱신하고 영구적으로 데이터 베이스에 반영
UPDATE MY_DATA SET SALARY=65000.00 WHERE ID=3;
COMMIT;
--07. 이름이 Ford인 사원을 영구 제명
DELETE FROM MY_DATA WHERE NAME='Ford';
COMMIT;
--08. 급여가 15,000이하인 사람의 급여를 15,000으로 변경
UPDATE MY_DATA SET SALARY=15000 WHERE SALARY<=15000;
--09. 1번에서 생성한 테이블을 삭제
DROP TABLE MY_DATA;

-- ★ ERD: (구조화된 데이터를 저장하기 위해 DB 사용) 
--        DB의 구조와 제약 조건 등 다양한 기법을 설계하는 툴 
CREATE TABLE DEPT1 (
    DEPTNO  NUMBER(2),
    DNAME   VARCHAR2(14),
    LOC     VARCHAR2(13),
    PRIMARY KEY(DEPTNO)
    );
SELECT * FROM DEPT1;
CREATE TABLE EMP1(                          --제약조건: 부적합한 데이터 삽입 방지 수단
    EMPNO   NUMBER(4)       PRIMARY KEY,    --제약조건1. PRIMARY KEY
    ENAME   VARCHAR2(10)    UNIQUE,         --제약조건2. UNIQUE
    JOB     VARCHAR2(9)     NOT NULL,       --제약조건3. NOT NULL
    MGR     NUMBER(4),
    HIREDATE    DATE        DEFAULT SYSDATE,--제약조건4. DEFAULT
    SAL     NUMBER(7,2)     CHECK(SAL>0),   --제약조건5. CHECK
    COMM    NUMBER(7,2),
    DEPTNO  NUMBER(2)       REFERENCES DEPT1(DEPTNO)    --제약조건6.FOREIGN KEY
    );
SELECT * FROM EMP1;
DESC EMP1;
-- DEPT1 입력
INSERT INTO DEPT1 VALUES (10, 'ACCOUNTING', 'SEOUL');
INSERT INTO DEPT1 VALUES (20, 'MARKETING', 'PUSAN');
INSERT INTO DEPT1 VALUES (30, 'SALES', 'INCHEON');
INSERT INTO DEPT1 VALUES (40, 'IT', 'GIMPO');
--EMP1 입력
INSERT INTO EMP1 (EMPNO, ENAME, JOB, MGR, SAL, DEPTNO)
    VALUES (1111, 'KONG', 'CEO', NULL, 9000, 40);
INSERT INTO EMP1 (EMPNO, ENAME, JOB, MGR, SAL, DEPTNO)
    VALUES (1112, 'KONGU', 'MARKETER', 1111, 1000, 20);
COMMIT;

-- 2020-12-31 DBMS_07.DCL   ⓒcherryuki(ji)
-- ★ 03. DCL ★ --
-- 사용자 계정 생성, 사용자 권한 부여, 권한 박탈, 트랜잭션 명령어(TCL)
-- 1) 계정 추가 (현 scott 계정이 DBA권한이므로)
CREATE USER kim IDENTIFIED BY tiger; --kim(PW: tiger)계정 생성
-- 2) 권한 부여(GRANT)
GRANT CREATE SESSION, CREATE TABLE TO kim;
GRANT SELECT ON EMP TO kim;
SHOW USER;
-- 3) 권한 박탈(REVOKE)
REVOKE SELECT ON EMP FROM kim;
-- 4) 계정 삭제
DROP USER kim; 