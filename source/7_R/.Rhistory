## 01. 도움말 기능
# 1.1 도움말
iris
edit(iris)
?iris
help(iris)
# 1.2 검색 기능
??iris
help.search(iris)
help.search('iris')
# 1.3 패키지 도움말
library(help='datasets')
# 1.4 함수 도움말
methods(as)
as.integer(1.25)
?as.integer
example(as.integer)
data <-c(10,20,30)
mean(data)
?mean
example(mean)
attributes(iris)
# 1.5 정보
edit(iris)
# 1.6 주석과 자동 완성
# 주석: #
# 자동완성: TAB
R.version
## 02. 패키지
# R내 기본 패키지 외 패키지 다운로드 가능
# R내 기본 패키지: c>Program Files R>R-4.0.3>library 폴더들
# 2.1 패키지 설치
# 설치: install.package("패키지명")
# 설치된 패키지를 메모리에 로드: library("패키지명")
# 패키지 내 데이터나 함수들 사용
# 패키지 언로드: detach("package:패키지명", unload=TRUE)
detach("package:datasets", unload=TRUE)
iris
install.packages("arules")
libirary("arules")
?arules
?apriori
detach("package:arules", unload=TRUE)
detach("package:arules", unload=TRUE)
?apriori
library("arules")
?apriori
detach("package:arules", unload=TRUE)
# 데이터의 경우 메모리에 패키지 로드없이 사용 가능
data(iris, package="datasets")
iris
# 변수들 전부 삭제
ls()
rm(list=ls())
## 03. 변수
# 변수: 특수문자('.', '_') 사용 가능
# 할당: <-, <<-
result <-0
class(result)
add <-function(a,b) {
result <-a+b #지역변수
}
add <-function(a,b) {
result <-a+b #지역변수
return(result)
}
add(10,20)
result
add <-function(a,b) {
#result <-a+b #지역변수
result <<-a+b #전역변수에 할당
return(result)
}
add(10,20)
result
# 변수목록 조회
x <-10
y <-10
(z<-x+y)
ls()
?ls
ls(all.names=TRUE)
?.Random.seed
## 04. 출력
result
print(result)
(z<-Z+10)
(z <- Z+10)
z
(z <- z+10)
paste('Hello', 'World')
paste('result 값은', result)
#print('result 값은'+result) #에러
paste('Hello', 'world', sep=',')
#print('result 값은'+result) #에러
paste('Hello', 'world', sep=', ')
1:3
paste(c(1,2,3), c('하나', '둘', '셋'), sep='은 ')
paste(c(1,2,3), c('하나', '둘', '셋'), sep='은 ', collapse=', ')
month.name
(nth <-paste(1:12, c('st', 'nd', 'rd', rep('th',9)), sep=''))
paste(month.name, nth)
paste(month.name, nth, sep='은 ', collapse='; ')
(kor <- c('한국', '일본', '미국'))
(usa <-c('Korea', 'Japan', 'America'))
paste(kor, usa, sep=':', collapse=', ')
(str <- paste(kor, usa, sep=':', collapse=', '))
str
cat(str)
# 문제2) MASS::Cars93 (패키지::데이터) 데이터 출력
data(Cars93, package="MASS")
Cars93
head(Cars93) #1~6행까지만
# 2. 기본 데이터 타입: character, numeric, logical
a <- "Hello\nR"
a
a <- "Hello
R"
class(a)
cat(a)
class(b)
b <- 10.1
class(b)
strB <-as.character(b)
class(strB)
c <-TRUE
class(c)
is.logical(c)
str(a)
stb(b)
str(b)
str(c)
# 3. 특별한 값(NULL, NA:결측치, NaN, Inf)
reuslt <-0
add <-function(a,b) {
result <<-a*5+b #전역변수 result에 할당
return(result)
}
(temp <-add(1,2))
(temp <-add(a=1, b=2))
(temp <-add(b=10, a=5))
(temp <-add(a=1, b=3))
add <-function(a,b) {
result <<-a*5+b #전역변수 result에 할당
return()
}
(temp <-add(a=1, b=3))
is.null(temp)
d <- c(2,4,NA,6,NaN,10/0)
d
관련 함수
#is.na(d)
#NA(결측치) 관련 함수
is.na(d)
complete.case(d)
d
complete.case(d)
#complete.case(d)
na.omit(d);
na.pass(d)
#complete.case(d)
na.omit(d)
?is.na
complete.cases(d)
na.omit(d)
na.pass(d)
mean(d) #평균값 계산시 NA가 있을 경우 NA
?mean
d<-c(2,3,4,5,NA,12)
mean(d, na.rm=TRUE)
boxplot(d)
# 4. 팩터(Factor): 범주형 데이터, 명명식(Norminal), 순서식(Ordinal)
gender1 <-c('남', '남', 여)
# 4. 팩터(Factor): 범주형 데이터, 명명식(Norminal), 순서식(Ordinal)
gender1 <-c('남', '남', '여')
gender1[3]
class(gender1)
gender1[4] <-'넘'
gender1
gender <-factor(c('남','남','여'), levels=c('남','여'))
class(gender)
gender[3]
gender
str(gender)
str(gender1)
gender[4] <-'넘'
gender
level <-factor(c('좋음', '보통', '보통'), levels=c('싫음', '보통', '좋음'), ordered=T)
level
level <-ordered(c('좋음','보통','보통'), levels=c('싫음', '보통', '좋음'))
level
levle[4] <-'몰라' #<Na>
level
level[4] <-'몰라' #<Na>
level
nlevels(level)
nlevles(gender)
levels(level)
gender1 <-c('남', '남', '여')
class(gender1)
gender1<-as.factor(gender1)
gender1
# 6. 벡터: 동일 자료형의 집합
data <-c(11,22,33,'TEST')
data <-c(11, 22, 33, TRUE) #숫자, logical ->숫자(T:1, F:0)
data <-c(TRUE, 'TEST') #logical, 문자 -> 문자
data <-c(1,2,3) #1 index부터 시작
data[4] <-40
data
# 행과 열 조회
NROW(data)
length(data)
data <-c(1:4)
names(data) <-c('A열', 'B열', 'C열', 'D열')
#특정한 값 조회
data[1]
data['A열'] #A열 값 반환환
data[c(1,2)]
data[c(1:2)]
data[c('A열', 'B열')]
data[-2]
data[data>2]
data[c(TRUE,FALSE,F,T)]
2%in%data
# Q1. 시험점수 변수를 만들어 출력하고 전체 평균을 구한 후 출력
# 80, 60, 70, 50, 90, 미응시
score <- c(80,60,70,50,90,NA)
print("시험점수는 아래와 같다\n")
print(paste('시험 점수는', score))
cat('시험 점수는 아래와 같다\n', score)
print("시험점수는 아래와 같다\n", score)
(avg <- mean(na.omit(score)))
(avg <-mean(score, na.rm=TRUE))
# Q2.
# Lee, Kim, Yun, Park, Lim, Yi
names(score) <-c('Lee', 'Kim', 'Yun', 'Park', 'Lim', 'Yi'
# Q2.
# Lee, Kim, Yun, Park, Lim, Yi
names(score) <-c('Lee', 'Kim', 'Yun', 'Park', 'Lim', 'Yi')
# Q2.
# Lee, Kim, Yun, Park, Lim, Yi
names(score) <-c('Lee', 'Kim', 'Yun', 'Park', 'Lim', 'Yi')
names(score)
score
score[score>80]
class(score)
is.vector(score)
# 6.1 character()
charArr <- character()
is.vector(charArr)
length(charArr)
charArr <- character(5)
charArr
charArr[1] <-'안녕'; charArr[2]='R'; charArr[3]='복습중'
charArr[7] <-'테스트'
charArr
# 6.2 numeric()
intArr <-numeric()
class(intArr)
is.vector(intArr)
intArr[1]<-1
intArr[3]<-3
intArr
# 6.3 logical()
logiArr <-logical(2)
logiArr[1] <-TRUE
logiArr[2] <-FALSE
logiArr[3] <-T
logiArr
# 6.4 seq()
?seq
a <-seq(from=1, to=10)
a <-seq(from=1, to=10, by=2)
a <-1:10
is.vector(a)
seq(10, -10, -2)
seq(0, 1, 0.1)
seq(1, 9, by=pi)
# 6.5 rep(); 반복객체를 만드는 함수
rep(1:4, 2)
rep(1:4 times=2)
rep(1:4, times=2)
rep(1:4, each=2)
rep(1:4, c(1,2,3,4))
rep(1:4, each=2, len=6)
rep(1:4, times=2 len=6)
rep(1:4, times=2, len=6)
# 6.6 벡터의 연산(+, -, *, /, 결합, 교집합, 합집합, 차집합, 비교연산)
a <-c(1,2,3)
b <-c(10,20,30)
a+b
a-b
a^b
b^a
a*b
a%%b
a%b #나머지 연산자
a%%b #나머지 연산자
c(a,b)
a <-c(1,2,3)
b <-c('Hello', 'R')
c <-c(TRUE, FALSE)
(z<-c(a,b,c))
a <-append(a, c(4,5,6))
a <-append(a,7)
a[8]<-8
a
#벡터의 집합 연사: 합집합, 교집합, 차집합, 비교
a <-c (1,2,3,4,5,6)
b <-c(2,4,6,8,10,12)
union(a,b) #합집합합
intersect(a,b)
setdiff(a,b)
setequal(a,b)
setequal(a,c(intersect(a,b), setdiff(a,b)))
# 7. 리스트
student <-list(name='공유', age=43)
student
studentVector <-unlist(student)
studentVector
s <-c('공유', 43)
names(s) <-c('name', 'age')
s
student <-as.list(s)
student['name']
student$name
student[1]
student[[1]]
student$age <-NULL
student
NROW(student)
length(student)
# 8. 행렬
colMatrix <-matrix(1:15, nrow=5, ncol=3)
colMatrix
?matrix
colMatrix
colMatrix <-matrix(1:15, nrow=5, byrow=FALSE)
colMatrix
rowMatrix <-matrix(1:15, nrow=5, ncol=3, byrow=T,
dimnames=list(c('R1','R2','R3','R4','R5'),
c('C1','C2','C3')))
rowMatrix
dim(rowMatrix)
nrow(rowMatrix)
NROW(rowMatrix)
ncol(rowMatrix)
NCOL(rowMatrix)
dim(rowMatrix)
dim(rowMatrix) <-c(3,5)
dim(rowMatrix)
rowMatrix
dimnames(rowMatrix)
rownames(rowMatrix)
colnames(rowMatrix)
#행이름과 열이름 수정
dimnames(rowMatrix) <-list(c('1월', '2월', '3월', '4월', '5월'),
c('Kim', 'Lee', 'Park'))
#행이름과 열이름 수정
dimnames(rowMatrix) <-list(c('1월', '2월', '3월', '4월', '5월'),
c('Kim', 'Lee', 'Park'))
rowMatrix
#행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월', '2월', '3월', '4월', '5월'),
c('kim', 'lee', 'park'))
dimnames(rowMatrix)
dim(rowMatrix) <-c(3,5)
rowMatrix
#행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월', '2월', '3월', '4월', '5월'),
c('kim', 'lee', 'park'))
dimnames(rowMatrix)
# 행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월','2월','3월','4월','5월'),
c('kim','lee','choi'))
dim(rowMatrix) <-c(3,5)
rowMatrix
#행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월', '2월', '3월', '4월', '5월'),c('kim', 'lee', 'park'))
#행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월', '2월', '3월', '4월', '5월'),c('kim', 'lee', 'park'))
#행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월', '2월', '3월', '4월', '5월'), c('kim', 'lee', 'park'))
dimnames(rowMatrix)
rowMatrix
dim(rowMatrix) #행과 열의 수
#행이름과 열이름 수정
dimnames(rowMatrix) <- list(c('1월', '2월', '3월', '4월', '5월'), c('kim', 'lee', 'park'))
#행이름과 열이름 수정
dimnames(rowMatrix) <-list(c('1월', '2월', '3월', '4월', '5월'), c('kim', 'lee', 'park'))
#행이름과 열이름 수정
dimnames(rowMatrix) <-list(c('1월', '2월', '3월', '4월', '5월'), c('kim', 'lee', 'park'))
dim(rowMatrix) <-c(5,3)
#행이름과 열이름 수정
dimnames(rowMatrix) <-list(c('1월', '2월', '3월', '4월', '5월'), c('kim', 'lee', 'park'))
rowMatrix
dimnames(rowMatrix)
#행렬의 곱을 이용하여 선형회귀식 도출
x <-c(2,4)
y <-c(40,60)
X <-matrix(c(x, rep(1,NROW(x))), nrow=2, ncol=2, byrow=FALSE)
Y=matrix(y, ncol=1)
# X %*% ab = Y #행렬의 곱: %*%
# slove(X): X의 역행렬  # solve(X) %*% X %*% ab = solve(X) %*% Y
ab <- solve(X) %*% Y
ab
ab[1] #x의 기울기기
ab[2]
plot(x,y)
lines(x, x*ab[1]+ab[2])
lines(x,y)
x <- c(32, 64, 96, 118, 126, 144, 152.5, 158) #독립변수
y <- c(18, 24, 61.5, 49, 52, 105, 130.3, 125)
X <-matrix(c(x, rep(1, NROW(x))), ncol=2)
X
Y <-matirx(y, ncol=1)
Y <-matrix(y, ncol=1)
Y
# X %*% ab = Y
# 전치행렬 곱해서 정방행렬
t(X)
t(X)%*%X
#solve(t(X) %*% X) %*% t(X) %*% X %*% ab =solve(t(X) %*% X) %*% t(X) %*% Y
ab = solve(t(X)%*%X)%*%t(X)%*%Y
ab
plot(x,y)
lines(x, x*ab[1]+ab[2])
#다변량에서 회귀분석 도출
x1 <-c(60, 65, 55) #몸무게
x2 <-c(5.5, 5.0, 6.0) #키
x3 <-c(1, 0, 1) #흡연유무
y <-c(66, 74, 78) #수명
X <-matrix(c(x1, x2, x3), ncol=3)
X
Y <-matrix(y, ncol=1)
Y
#X%*%ab=Y
ab = solve(X)%*%Y
ab
# 80kg, 6.5ft, 금연시 예상 수명은?
80*ab[1]+6.5*ab[2]+0*ab[3]
#행렬 연산(+,-,*,/, %%, ..., %*%)
a <-matrix(1:4, nrow=2, ncol=2)
a
b <-matrix(seq(10,40,10), nrow=2, ncol=2)
b
a+b
a-b
b-a
a*b
a^b
b^a
a%%b
b%%a
## 행렬연산 중 행렬 곱(%*%)
payMatrix <-matrix(c(12000, 26000, 18000), ncol=3)
payMatrix
dimnames(payMatrix) <-list(c('시간당 수당'), c('보검', '공유', '지민'))
workerMatrix <-matrix(c(c(5,4,9), c(7,3,2)), ncol=2)
workerMatrix
dimnames(workerMatrix) <-list(c('보검', '공유', '지민'), c('1월', '2월'))
cost <-payMatrix%*%workerMatrix
rownames(cost) <-c('인건비')
cost
