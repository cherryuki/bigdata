switch(2, "red", "green", "blue")
x <- switch(4, "red", "green", "blue")
x
x <- switch(0, "red", "green", "blue")
x #NULL
#사용자로부터 color값을 입력받아 해당 color 출력
?readline
color <- as.integer(readline(prompt="원하는 색(red:1, green:2, blue:3)?"))
switch(color, "red", "green", "blue")
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red", "green", "blue")
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
#Q. 점수(50~100)를 입력받아 학점을 계산하는 프로그램 구현
# 100: perfect, 90점대: A, 80점대: B, 70점대: c, 60점대: D, 50점대: F
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요"))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
grade
#Q. 점수(50~100)를 입력받아 학점을 계산하는 프로그램 구현
# 100: perfect, 90점대: A, 80점대: B, 70점대: c, 60점대: D, 50점대: F
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요"))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
grade
#Q. 점수(50~100)를 입력받아 학점을 계산하는 프로그램 구현
# 100: perfect, 90점대: A, 80점대: B, 70점대: c, 60점대: D, 50점대: F
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요: "))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
grade
getGrade <-function() {
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요: "))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
cat('점수는 ', score, '점, 학점은 ', grade)
}
getGrade()
# 1.2 반복문; for, while, repeat
# (1) for문
1:10
seq(1:10)
seq(10)
x<-c(2, 5, -8, 10, 3)
for(val in x) {
cat(val, '\t')
}
count <-0
for(Val in x) {
if(val%%2==0) {
count=count+1
}
}
count
x<-c(2, 5, -8, 10, 3)
for(Val in x) {
if(val%%2==0) {
count=count+1
}
}
count
for(Val in x) {
if(val%%2==0) {
count=count+1;
}
}
count
count <-0
for(val in x) {
if(val%%2==0) {
count = count+1;
}
}
count
#10회 반복
for(val in 1:10) {
cat(val, "안녕")
}
#10회 반복
for(val in 1:10) {
cat(val, "안녕 ")
}
#Q. factorial 계산 함수를 작성
#결과: 5!=120
factorial(5) #5*4*3*2*1
result <-1
fact <-function(n) {
if(n<0) {
print("양수를 입력해주세요")
} else if(n==0) {
cat("0 ! = 1")
} else {
result <-1
for(val in n:1) {
result=result*val
}
cat(n, "! =", result)
}
}
fact(-2)
fact(0)
fact(3)
fact(5)
rm(list=ls())
getwd()
#getwd() #현재 working 디렉토리
#setwd("C:/Bigdata/source/7_R")
#getwd()
source('fact.R', encoding='utf-8')
#getwd() #현재 working 디렉토리
#setwd("C:/Bigdata/source/7_R")
#getwd()
source('fact.R', encoding='utf-8')
fact(3)
# (2) while
i<-1
while(i<6) {
+print(i)
i=i+1
}
# (3) repeat: 반복
i<-1
repeat{
if(i>6) break
print(i)
i<-i+1
}
# (4) break, next(자바에서의 continue)
x <-1
while(x<10) {
x <-x+1
if(x==3) next;
cat(x'\t')
}
while(x<10) {
x <-x+1
if(x==3) next;
cat(x,'\t')
}
while(x<10) {
x <-x+1
if(x==3) break;
cat(x,'\t')
}
# (4) break, next(자바에서의 continue)
x <-1
while(x<10) {
x <-x+1
if(x==5) break;
cat(x,'\t')
}
# 2. 연산자
# 논리연산자 &, &&, |, ||
TRUE & TRUE
TRUE && TRUE
x <-c(TRUE, FALSE, T, T, F)
y <-c(T, T, F, T, F)
x&y
x&&y
x | y
x || y
# 중위 연산자
5+8
'+'(5, 8)
'%add%' <-function(x,y) {
return(x+y)
}
'%add%'(5,2)
5%add%2
c <-c(10, 23, 30)
10 %in% c
strings <-c("Hello", "world", "R")
'R' %in% strings
strings %in% 'R'
#%o% : 벡터의 외적(outer)
#%*% : 백터의 내적(or 행렬의 곱)
a <-c(2,3,4)
b <-c(10,20,30)
a %o% b
a <-c('1', '2', '3')
b <-c('a', 'b', 'c')
outer(a,b, FUN=paste)
matrix.a <-matrix(1:6, nrow=3)
(marix.b <-matrix(1:6, nrow=3, ncol=2))
# 3. 함수
pow <-function(x,y) {
return(x^y)
}
pow(2,5)
# 가변인자 함수: total(), total(1), total(2,3,4)
total <-function(...) {
args <-list(...)
sum <-0
for(i in args) {
sum <-sum+i
}
return(sum)
}
total()
total(1)
total(3)
total(2, 3, 5)
# 재귀호출: 자기자신을 호출하는 함수->재귀함수(Recursive Function)
fact <-function(num) {
if(num<0) {
return()
} else if(num==0||num==1) {
return(1)
} else {
return(num*fact(num-1))
}
}
#fact(3) -> 6(3!)을 리턴
#fact(3) = 3*fact(2) = 3*2*fact(1) = 3*2*1
#fact(num) = num*fact(num-1) (단, num>1)
fact(-1)
fact(0)
fact(1)
fact(3)
# 4. R환경
environment() #<environment: R_GlobalEnv>
ls()
f <-function(f_x) {
g <-function(g_x) {
print('g함수 안')
print(environment())
print(paste('g함수 영역에서의 변수들', ls()))
}
g(5)
print('f함수 안')
print(environment())
cat('f함수 영역에서의 변수들', ls())
}
f(1)
f()
is.primeNum <-function(num) {
if(num<1) {
return(FALSE)
} else {
result <-0
count <-0
for(val in num:1) {
result = num%%val
if(result==0) {
count=count+1
}
}
if(count==2) {
return(TRUE)
} else {
return(FALSE)
}
}
}
is.primeNum(-1)
is.primeNum(0)
is.primeNum(2)
is.primeNum(-3)
is.primeNum(0)
is.primeNum(1)
is.primeNum(2)
is.primeNum(23)
is.primeNum(5)
# 1. 파일 입출력
# 1.1 시스템 인코딩 조회
Sys.getlocale()
# 1.2 write.table(); 데이터를 파일에 저장
iris
class(iris)
write.table(iris, file="outData/iris.csv", sep=",", row.names=FALSE)
InsectSprays
write.table(InsectSprays, file='outData/insect.csv', sep=',')
# 1.3 read.table(); 파일을 읽어 데이터프레임 형태로 저장
irisData <-read.table("outData/iris.csv", sep=',', header=TRUE, encoding='UTF-8', stringsAsFactors = TRUE)
head(irisData)
tail(irisData)
str(irisData)
irisData$Species
irisData$Species <-as.factor(irisData$Species)
irisData$Species <-factor(irisData$Species, levels=c("setosa", "versicolor", "virginica"))
irisData$Species
str(irisData$Species)
nrow(irisData)
summary(irisData)
# 1.4 write.csv(); csv파일 형식으로 저장
write.csv(iris, file="outData/iris1.csv")
write.csv(iris, fiel="outData/iris1.csv", quote=FALSE)
write.csv(iris, file="outData/iris1.csv", quote=FALSE)
# 1.5 read.csv(); csv파일 읽기
newData <-read.csv(file.choose())
newData <-read.csv('outData/iris1.csv', header=TRUE, stringsAsFactors = TRUE)
head(newData)
tail(newData)
str(newData)
summary(newData)
# 1.6 cat(); 분석 결과등을 저장할 때
irisSummary <-summary(newData)
class(irisSummary)
irisSummary[1,]
nrow(irisSummary)
cat('iris 요약:', '\n', file='outData/irisSummary.txt')
for(i in 1:nrow(irisSummary)) {
cat(irisSummary[i,], '\n', file='outData/irisSummary.txt', append=T)
}
# 2. apply계열 함수 적용
# 2.1 apply
#iris데이터의 열별평균(합계, 분산, 표준편차, 최소값, 최대값, 중앙값)
#apply(대상자료, 1or2, 함수) 1:행별 함수 수행, 2: 열별 함수 수행
head(iris[,1:4])
head(iris[,-5])
apply(iris[,1:4],1,mean)
apply(iris[,1:4], 1, mean)
apply(iris[,-5], 2, mean)
#setosa종과 versicolor종과 virginica종을 분류하고 각각의 열별 평균 구하기
apply(subset(iris, iris$Species=='setosa', select=-5), 2, mean)
apply(subset(iris, iris$Species=='versicolor', select=-c(5)),2, mean)
apply(subset(iris, iris$Species=='virginica', select=c(-5)),2, mean)
apply(iris[,1:4], 2, FUN=mean)
apply(iris[,1:4], 2, FUN=sd)
apply(iris[,-5], 2, FUN=sum)
apply(iris[,-5], 2, FUN=median)
apply(iris[,1:4], 2, FUN=min)
apply(iris[,1:4], 2, FUN=max)
apply(iris[,-5], 2, FUN=min)    #열별 최소값
apply(iris[,-5], 2, FUN=max)    #열별 최대값
#InsectSPrays에서 count의 표준 편차
apply(InsectSprays['count'],2, FUN=sd)
#InsectSPrays에서 count의 표준 편차
apply(InsectSprays[,'count'],2, FUN=sd)
#InsectSPrays에서 count의 표준 편차
apply(InsectSprays['count'],2, FUN=sd)
name <-c('김', '이', '박', '강', '윤')
kor <-c(90, 50, 70, 60, 100)
eng <-c(100,40,50,60,70)
mat <-c(90,91,50,64,80)
student <-data.frame(name, kor, eng, mat)
student
apply(studnet[,-1], 1, mean)
apply(student[,-1], 1, mean)
apply(student[,-1], 2, mean)
#2.2 lapply: list apply(결과도 list)
x <- list(a=1:10, beta=exp(-3:3), logical=c(T,F,F,T))
#지수함수: exp(a:b) e의 a승부터 e의 b승까지 출력
x
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
# 2.3 sapply: lapply와 유사하나 결과를 행렬이나 벡터로 반환
saplly(x, mean)
# 2.3 sapply: lapply와 유사하나 결과를 행렬이나 벡터로 반환
sapply(x, mean)
sapply(x, quantile)
sapply(x, quantile, 1:3/4)
fivenum(0:10)
i39 <-sapply(c(3:9), seq)
i39
sapply(i39, fivenum)
lapply(i39, fivenum)
#Q. iris데이터를 lapply와 sapply를 이용하여 Sepal.Length~Petal.Width까지의 평균
lapply(iris[,-5], mean)
sapply(iris[,-5], mean)
irisList <- as.list(iris[,1:4])
irisList
lapply(irisList, mean)
sapply(irisList, mean)
# 2.4 vapply: sapply와 유사하나 FUN의 모든 값이 FUN.VALUE와 호환되는지 확인
vapply(irisList, mean, numeric(1))
vapply(i39, fivenum,
FUN.VALUE = c(numeric(1), numeric(1), numeric(1), numeric(1), numeric(1)))
cities <-c('Seoul', 'Busan', 'New York', 'Tokyo')
nchar(cities[1])
sapply(cities, nchar)
lapply(cities, nchar)
vapply(cities, ncahr, FUN.VALUE = numeric(1))
vapply(cities, nchar, FUN.VALUE=numeric(1))
# 2.5 mapply: sapply와 유사하나 다수의 인자를 함수에 전달
rep(c(1:3), 3)
x <-c(1,2,3,4)
mean(x)
mapply(rep, x=1:4, times=4:1)
mapply(rep, x=1:4, each=4:1)
rm(list=ls())
#직업별 수입
job <-c(3,3,5,2,2,3,5,3,4,4,6,3)
income <-c(4897,6509,4183,0,3894,0,3611,6454,4975,8780,0,4362)
cust <-data.frame(job, income)
cust
income.avg <-c(862, 0, 3806, 3990, 3891, 3359, 3556, 2199)
names(income.avg) <-0:7
income.avg
zero2mean <-function(job, income) {
#return(ifelse(income==0, income.avg[as.character(job)], income))
if(income==0) {
return(income.avg[as.character(job)])
}else {
return(income)
}
}
#mapply(zero2mean, cust$job, cust$income)
cust$income2 <- mapply(zero2mean, cust$job, cust$income)
cust
# 3. 데이터 그룹화 함수 적용
# 3.1 tapply: 그룹별 처리를 위한 apply함수
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, sd)
boxplot(iris$Sepal.Length~iris$Species)
cust
#직업별
cust$job <-factor(cust$job, levels=0:7)
str(cust)
tapply(cust$income2, cust$job, mean)
tapply(cust$income2, cust$job, FUN=mean, default = -1)
datasets::InsectSprays
head(InsectSprays)
tail(InsectSprays)
str(InsectSprays)
# spray의 종류에 따른 살충효과를 점검
tapply(InsectSprays$count, InsectSprays$spray, mean)
nrow(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sd)
boxplot(InsectSprays$count~InsectSprays$spray)
# 3.2 by: 그룹화 처리를 위한 apply(함수 2개 이상 가능)
by(iris[,1:2], iris[,5] sum)
# 3.2 by: 그룹화 처리를 위한 apply(함수 2개 이상 가능)
by(iris[,1:2], iris[,5], sum)
by(iris[,1:2], iris[,5], min)
by(iris[,1:4], iris$Species, summary)
#cust의 직업별 평균을 income과 income2 한번에
by(cust[,c('income', 'income2')], cust$job, mean)
#cust의 직업별 평균을 income과 income2 한번에
by(cust[,c('income', 'income2')], cust$job, summary)
#cust의 직업별 평균을 income과 income2 한번에 #mean은 불가능
by(cust[,c('income', 'income2')], cust$job, FUN=mean)
#cust의 직업별 평균을 income과 income2 한번에 #mean은 불가능
by(cust[,c('income', 'income2')], cust$job, summary)
# 3.3 doBy 패키지
install.packages('doBy')
library(doBy)
summaryBy(Sepal.Length+Sepal.Width~Species, iris)
summaryBy(Sepal.Length+Sepal.Width+Petal.Length+Petal.Width~Species, iris, FUN=sd)
summaryBy(Sepal.Length+Sepal.Width+Petal.Length+Petal.Width~Species,
iris, FUN=c(mean, sd))
summaryBy(Sepal.Length+Sepal.Width+Petal.Length+Petal.Width~Species,
iris, FUN=c(mean, sd))
#Q. emp.csv 파일의 데이터를 받아 부서별 급여, 상여금을 비교
emp <-read.csv(file="inData/emp.csv", header=T)
emp
str(emp)
emp$deptno <-factor(emp$deptno, levels=seq(10,40,10))
names(emp)
taaply(emp$comm, emp$deptno, FUN=mean)
tapply(emp$sal, emp$deptno, FUN=mean, default=0)
tapply(emp$sal, emp$deptno, FUN=mean)
tapply(emp$comm, emp$deptno, FUN=mean)
summaryBy(sal+comm~deptno, emp, FUN=mean, na.rm=T)
tapply(emp$comm, emp$deptno, FUN=mean, na.rm=T)
# (2) orderBy 정렬
orderBy(~Sepal.Length, data=iris)
orderBy(~-Sepal.Length, data=iris)
orderBy(~Species+Sepal.Length, data=iris)
orderBy(~Species-Sepal.Length, data=iris) #Species, Sepal.Length 내림림차순
#종별, Sepal.Length 오름차순으로 정렬한 데이터
orderBy(~Species+Sepal.Length, data=iris[, c('Sepal.Length', 'Sepal.Width', 'Species')])
head(orderBy(~Species+Sepal.Length, data=iris))
#Q1. emp데이터셋에서 월급이 적은 순으로 ename, sal 추출
orderBy(~emp$sal, data=emp)
#Q1. emp데이터셋에서 월급이 적은 순으로 ename, sal 추출
orderBy(~sal, data=emp)
#Q1. emp데이터셋에서 월급이 적은 순으로 ename, sal 추출
orderBy(~sal, data=emp[,c('ename', 'sal')])
#Q2. 월급이 적은 순 5명만 ename, sal
head(orderBy(~sal, data=emp[,c('ename', 'sal')]),5)
# (3) sampleBy
sampleBy(~Species, data=iris, frac=0.1)
sampleBy(~Species, data=iris, frac=0.1, replace=T)
sampleBy(~Species, data=iris, frac=0.1, systematic=T)
#벡터 샘플링
idx <-sample(1:150, 10)
idx
iris[idx,]
# 4. Formula: ~, +, -, :, * 등
## lm() 선형회귀식 도출 함수(독립변수, 종속변수 연속적 변수에서 사용)
x <- c(1,2,3,4,5) #공부 시간(독립변수)
y <- c(20,41,59,81,98) #점수(종속변수) -회귀분석
y1 <- c('F', 'F', 'F', 'P', 'P') #당락여부(종속변수) -로지스틱 회귀; glm()
fit <lm(y~x)
fit <-lm(y~x)
fit
plot(x,y, col='blue')
lines(x, x*19.6+1.0, col='red')
abline(fit, lty='dashed')
# 독립변수가 2개
x1<-c(1,2,3,4,5) #공부시간
x2<-c(10,20,3,4,5) #기출문제 푼 수
y <-c(50, 70, 63, 84, 95) #종속변수
fit <-lm(y~x1+x2) #x1과 x2사이의 상관관계가 없다는 전제 필요
fit
#cars
cars
fit <-lm(cars$dist~cars$speed)
fit <-lm(dist~speed, data=cars)
fit
plot(cars)
plot(cars$speed, cars$dist, col='green')
lines(cars$speed, cars$speed*3.932-17.579, col="blue")
abline(fit, lty="dotted")
