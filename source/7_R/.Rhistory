student_eng, student_kor, student_gender)
student_data
#(2) 데이터 프레임에 열추가 및 삭제
student_data$mat <-c(100, 100, 99, 89) #열 추가
student_data
class(student_data$student_gender)
student_data$student_id<-NULL #열 삭제
#(3) 열의 형변환
student_data$student_gender <-as.factor(student_data$student_gender)
class(student_data$student_gender)
str(student_data) #구조 조회
summary(student_data)
#(4) 열이름 변경
student_data
install.packages("reshape")
student <-rename(student_data, c("student_name"="name"))
student
student
student <-rename(student, c("student_eng"="eng",
"student_kor"="kor", "student_gender"="gender"))
student <-rename(student_data, c("student_name"="name"))
student <-rename(student_data, c("student_name"="name"))
#(4) 열이름 변경
student_data
student <-rename(student_data, c("student_name"="name"))
student <-renames(student_data, c("student_name"="name"))
install.packages("reshape")
library(reshape)
require("reshape")
student <-rename(student_data, c("student_name"="name"))
student <-rename(student, c("student_eng"="eng",
"student_kor"="kor", "student_gender"="gender"))
student
names(student_data) <-c("name", "eng", "kor", "gender", "mat")
student_data
#(5) 데이터 프레임 합치기
#행으로 합치기 rbind
(newStudent <-rbind(student_data, student))
#열로 합치기 cbind
student
id = data.frame(student_id)
id
student <-cbind(id, student)
student
names(student) <-c("id", "name", "eng", "kor", "gender", "mat")
student
#부분 데이터 조회
student <-rbind(student, student) #2회 실행 -> 16행
#부분 데이터 조회
student <-rbind(student, student) #2회 실행 -> 16행
nrow(student)
student[1,1] #1행 1열
student[1,'id']
student[1,] #1행 데이터
student[,1] #1열 데이터
student[c(1:3)] #1행부터 3행 데이터
student[, c(2,3,4,6)] #2,3,4,6 열 데이터
student[c(-2,-4,-6),] #,2,4,6행 제외한 모든 데이터
student[,c(-1,-5)] #1,5열 제외한 모든 데이터
student[c(1:3), c(-1,-5)] #1~3행까지 1열, 5열 제외한 데이터
#국어점수가 90점 이상인 데이터
subset(student, subset=(student$kor>=90))
subset(student, subset=(student$mat>=99))
subset(student, select=c(1,4)) #1열과 4열 데이터
subset(student, select=c(-1,-4)) #1열과 4열 제외한 데이터
#수학점수가 99점 이상인 여학생만 출력
subset(student, subset=(student$mat>99&student$gender=='여'))
#처음 5행만
student[c(1:5),]
head(student, 5)
#처음 3행만
head(student, 3)
edit(student)
emp <-read.csv(file.choose())
emp
head(emp)
class(emp)
#Q1. 직원 이름만 출력
emp[,2]
emp['ename']
emp$ename
class(emp)
#Q2. 직원 이름, job, sal
emp[c('ename', 'job', 'sal')]
#Q2. 직원 이름, job, sal
emp[,c('ename', 'job', 'sal')]
subset(emp, select=c('ename', 'job', 'sal'))
subset(emp, select=c(2,3,6))
#Q3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp, subset=(emp$ename=='KING'), select=c('empno', 'job', 'hiredate', 'sal'))
#Q4. sal이 2000이상인 직원의 empno, ename, sal
subset(emp, subset=(emp$sal>=2000), select=c('empno', 'ename', 'sal'))
#Q5. sal이 2000부터 3000사이인 직원의 ename, sal
subset(emp, subset=(emp$sal>=2000 & emp$sal<=3000), select=c('ename','sal'))
# 11. 타입 판별 및 타입 변환
head(emp)
tail(emp)
class(emp) #emp의 타입
str(emp)
emp$detno <-as.factor(emp$deptno)
str(emp)
class(iris)
edit(iris)
str(iris)
iris$Species
iris$Species <-as.character(iris$Species)
str(iris)
iris$Species <-as.factor(iris$Species)
levels(iris$Species)
# 타입판별
class(iris$Species)
is.factor(iris$Species)
str(iris$Species)
# 12. 문자열과 날짜
name <-"Eric"
length(name)
nchar(name)
names <-c("Eric", "Larray", "Curly")
length(names)
nchar(names)
#하위 문자열 추출하기: substr
?substr
substr('ABCDEF', 1, 4)
substr('ABCDEF', 4, 10)
substr(names, 1, 2)
#names안에 각각의 이름 맨마지막 자리 앞글자, 맨 마지막 글자 추출
substr(names, nchar(names)-1, nchar(names))
#문자열 연결하기: paste, paste()
paste(names, 'loves', 'stars')
paste(names, 'loves', 'stars', sep='_')
paste(names, 'loves', 'stars', sep='_', collapse=', and')
paste(names, 'loves', 'stars', sep='_', collapse=', and ')
paste()(names, 'loves', 'stars')
paste0(names, 'loves', 'stars')
# Q. paste 함수를 이용해서 아래 결과와 같이 출력
name <-c ('Yun', 'Lim', 'Lee'); hobby <- c('swim', 'sleep', 'eat')
# 결과: Yun의 취미는 swim이고, Lim의 취미는 sleep이고, Lee의 취미는 eat
paste(name, '의 취미는 ', hobby, collapse='이고, ')
paste(name, hobby, sep='의 취미는 ', collapse='이고, ')
#문자열 분할(구분자로 분할)
path <-'home/hadoop/data/speech.csv'
strsplit(path, '/')
customerInfo <-'jin@gmail.com,010-9999-8888,seoul Korea'
strsplit(customerInfo, ',')
customers <-c('yun@naver.com,010-9999-6666,seoul Korea',
'lee@gmail.com,02-716-1006,pusan Korea',
'jin@hanmail.net,010-9999-8888,seoul Korea')
strsplit(customers, ',[0-9]{2,3}-[0-9]{3,4}-[0-9]{4},')
strsplit(customerInfo, ',010-9999-8888,')
#문자열 대체: sub(oldStr, newStr, string)
# gsub(oldStr, newStr, string)
s <- 'Curly is the smart one. Curly is funny, too.'
sub('Curly', 'Eric', s)
gsub('Curly', 'Eric', s)
#외적: outer; 문자열의 모든 쌍별 조합 만듦
a <-c('aa', 'bb', 'cc')
b <-c('11', '22', '33')
outer(a,b,FUN="paste")
outer(a,b,FUN="paste", sep=" ~ ")
?outer
#날짜
today=Sys.Date()
class(today)
#%Y: 년도 4자리(2021), %y: 년도 2자리(21)
#%m: 월 2자리(02), %d:일 2자리(03)
thatday = as.Date("2021-04-30", '%Y-%m-%d')
thatday
today<thatday
if(today<thatday) {
cat('today보다 thatday가 나중')
}
if(today<thatday) {
cat('today보다 thatday가 나중')
} else {
cat('today가 thatday보다 먼저')
}
#Q R데이터 종류 및 구조의 이해 실습
#1. iris데이터를 사용하여 data.frame의 특성 살펴보기
#1)
?iris
dim(iris)
dimnames(iris)
rownames(iris)
colnames(iris)
nrow(iris)
ncol(iris)
length(iris)
str(iris)
#2)
summary(iris)
head(iris$Sepal.Length, 10)
iris[c(1:10),'Sepal.Length']
iris[c(1:10),'Sepal.Length', drop=FALSE]
#3)
vir<-subset(iris, subset=(iris$Species=='virginica'))
set<-subset(iris, subset=(iris$Species=='setosa'))
#4)
rbind(set, vir)
#2. setosa종의 꽃받침의 폭과 길이 부분 데이터셋을 추출
subset(iris, subset=(iris$Species=='setosa'), select=c('Sepal.Width', 'Sepal.Length'))
#3. 작업내용에 따른 급여가 차등지급(행렬문제)
payMatrix <- matrix(c(12000, 26000, 18000), ncol=3)
payMatrix
dimnames(payMatrix) <-list(c('시급'), c('A작업', 'B작업', 'C작업'))
workerMatrix <-matrix(c(c(5,4,9), c(7,3,2)), ncol=2)
workerMatrix
dimnames(workerMatrix) <-list(c('A작업', 'B작업', 'C작업'), c('갑', '을'))
# cost <- payMatrix %*% workerMatrix 3*1 3*2
cost <- payMatrix %*% workerMatrix
#3. 작업내용에 따른 급여가 차등지급(행렬문제)
payMatrix <- matrix(c(12000, 26000, 18000), ncol=3)
#2. setosa종의 꽃받침의 폭과 길이 부분 데이터셋을 추출
subset(iris, subset=(iris$Species=='setosa'), select=c('Sepal.Width', 'Sepal.Length'))
#3. 작업내용에 따른 급여가 차등지급(행렬문제)
payMatrix <- matrix(c(12000, 26000, 18000), ncol=3)
payMatrix
dimnames(payMatrix) <-list(c('시급'), c('A작업', 'B작업', 'C작업'))
workerMatrix <-matrix(c(c(5,4,9), c(7,3,2)), ncol=2)
workerMatrix
dimnames(workerMatrix) <-list(c('A작업', 'B작업', 'C작업'), c('갑', '을'))
# cost <- payMatrix %*% workerMatrix 3*1 3*2
cost <- payMatrix %*% workerMatrix
rownames(cost) <-c('급여')
cost
# 1. 제어문
# 1.1 조건문
# (1) if문
num <- 9
if(num%%2==0) {
print(paste(num, "은 짝수"))
} else {
cat(num, "은 홀수")
}
# (2) ifelse() 함수
# "num%%2==0" "짝수":"홀수"
ifelse(num%%2==0, "짝수", "홀수")
(nums <-c(10, 9, 17, 5, 20))
result <- ifelse(nums%%2==0, "짝수","홀수")
result
m <-matrix(c(nums, result),ncol=5, byrow=TRUE,
dimnames=list(c('수', '홀짝'), c('1회', '2회', '3회', '4회', '5회')))
m
# (3) switch() 함수
switch(2, "red", "green", "blue")
x <- switch(4, "red", "green", "blue")
x
x <- switch(0, "red", "green", "blue")
x #NULL
#사용자로부터 color값을 입력받아 해당 color 출력
?readline
color <- as.integer(readline(prompt="원하는 색(red:1, green:2, blue:3)?"))
switch(color, "red", "green", "blue")
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red", "green", "blue")
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
color <-readline(prompt = "원하는 색(red, green, blue)?")
colorValue <-switch(color, "red"=1, "green"=2, "blue"=3)
cat('선택한 색상: ', color, '의 색상 값은 ',colorValue)
#Q. 점수(50~100)를 입력받아 학점을 계산하는 프로그램 구현
# 100: perfect, 90점대: A, 80점대: B, 70점대: c, 60점대: D, 50점대: F
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요"))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
grade
#Q. 점수(50~100)를 입력받아 학점을 계산하는 프로그램 구현
# 100: perfect, 90점대: A, 80점대: B, 70점대: c, 60점대: D, 50점대: F
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요"))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
grade
#Q. 점수(50~100)를 입력받아 학점을 계산하는 프로그램 구현
# 100: perfect, 90점대: A, 80점대: B, 70점대: c, 60점대: D, 50점대: F
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요: "))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
grade
getGrade <-function() {
score <- as.numeric(readline(prompt="점수(50~100)를 입력하세요: "))
grade <-switch(as.integer(score/10)-4, "F", "D", "C", "B", "A", "Perfect")
cat('점수는 ', score, '점, 학점은 ', grade)
}
getGrade()
# 1.2 반복문; for, while, repeat
# (1) for문
1:10
seq(1:10)
seq(10)
x<-c(2, 5, -8, 10, 3)
for(val in x) {
cat(val, '\t')
}
count <-0
for(Val in x) {
if(val%%2==0) {
count=count+1
}
}
count
x<-c(2, 5, -8, 10, 3)
for(Val in x) {
if(val%%2==0) {
count=count+1
}
}
count
for(Val in x) {
if(val%%2==0) {
count=count+1;
}
}
count
count <-0
for(val in x) {
if(val%%2==0) {
count = count+1;
}
}
count
#10회 반복
for(val in 1:10) {
cat(val, "안녕")
}
#10회 반복
for(val in 1:10) {
cat(val, "안녕 ")
}
#Q. factorial 계산 함수를 작성
#결과: 5!=120
factorial(5) #5*4*3*2*1
result <-1
fact <-function(n) {
if(n<0) {
print("양수를 입력해주세요")
} else if(n==0) {
cat("0 ! = 1")
} else {
result <-1
for(val in n:1) {
result=result*val
}
cat(n, "! =", result)
}
}
fact(-2)
fact(0)
fact(3)
fact(5)
rm(list=ls())
getwd()
#getwd() #현재 working 디렉토리
#setwd("C:/Bigdata/source/7_R")
#getwd()
source('fact.R', encoding='utf-8')
#getwd() #현재 working 디렉토리
#setwd("C:/Bigdata/source/7_R")
#getwd()
source('fact.R', encoding='utf-8')
fact(3)
# (2) while
i<-1
while(i<6) {
+print(i)
i=i+1
}
# (3) repeat: 반복
i<-1
repeat{
if(i>6) break
print(i)
i<-i+1
}
# (4) break, next(자바에서의 continue)
x <-1
while(x<10) {
x <-x+1
if(x==3) next;
cat(x'\t')
}
while(x<10) {
x <-x+1
if(x==3) next;
cat(x,'\t')
}
while(x<10) {
x <-x+1
if(x==3) break;
cat(x,'\t')
}
# (4) break, next(자바에서의 continue)
x <-1
while(x<10) {
x <-x+1
if(x==5) break;
cat(x,'\t')
}
# 2. 연산자
# 논리연산자 &, &&, |, ||
TRUE & TRUE
TRUE && TRUE
x <-c(TRUE, FALSE, T, T, F)
y <-c(T, T, F, T, F)
x&y
x&&y
x | y
x || y
# 중위 연산자
5+8
'+'(5, 8)
'%add%' <-function(x,y) {
return(x+y)
}
'%add%'(5,2)
5%add%2
c <-c(10, 23, 30)
10 %in% c
strings <-c("Hello", "world", "R")
'R' %in% strings
strings %in% 'R'
#%o% : 벡터의 외적(outer)
#%*% : 백터의 내적(or 행렬의 곱)
a <-c(2,3,4)
b <-c(10,20,30)
a %o% b
a <-c('1', '2', '3')
b <-c('a', 'b', 'c')
outer(a,b, FUN=paste)
matrix.a <-matrix(1:6, nrow=3)
(marix.b <-matrix(1:6, nrow=3, ncol=2))
# 3. 함수
pow <-function(x,y) {
return(x^y)
}
pow(2,5)
# 가변인자 함수: total(), total(1), total(2,3,4)
total <-function(...) {
args <-list(...)
sum <-0
for(i in args) {
sum <-sum+i
}
return(sum)
}
total()
total(1)
total(3)
total(2, 3, 5)
# 재귀호출: 자기자신을 호출하는 함수->재귀함수(Recursive Function)
fact <-function(num) {
if(num<0) {
return()
} else if(num==0||num==1) {
return(1)
} else {
return(num*fact(num-1))
}
}
#fact(3) -> 6(3!)을 리턴
#fact(3) = 3*fact(2) = 3*2*fact(1) = 3*2*1
#fact(num) = num*fact(num-1) (단, num>1)
fact(-1)
fact(0)
fact(1)
fact(3)
# 4. R환경
environment() #<environment: R_GlobalEnv>
ls()
f <-function(f_x) {
g <-function(g_x) {
print('g함수 안')
print(environment())
print(paste('g함수 영역에서의 변수들', ls()))
}
g(5)
print('f함수 안')
print(environment())
cat('f함수 영역에서의 변수들', ls())
}
f(1)
f()
is.primeNum <-function(num) {
if(num<1) {
return(FALSE)
} else {
result <-0
count <-0
for(val in num:1) {
result = num%%val
if(result==0) {
count=count+1
}
}
if(count==2) {
return(TRUE)
} else {
return(FALSE)
}
}
}
is.primeNum(-1)
is.primeNum(0)
is.primeNum(2)
is.primeNum(-3)
is.primeNum(0)
is.primeNum(1)
is.primeNum(2)
is.primeNum(23)
is.primeNum(5)
