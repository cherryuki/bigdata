flights_df %>%
filter(arr_delay<0 & dep_delay<0 ) %>%
summarise(n = n())
head(flights_df)
nrow(subset(flights_df, arr_delay<0&dep_delay<0))
nrow(flights_df[flights_df$arr_delay<0&flights_df$dep_delay<0])
nrow(flights_df[flights_df$arr_delay<0&flights_df$dep_delay<0,])
flights_dt(arr_delay<0&dep_delay<0, .(.N))
flights_dt[, .(delay_arr=arr_delay, delay_dep=dep_delay)]
flights_dt[arr_delay<0&dep_delay<0, .(.N)]
flights_dt[arr_delay<0&dep_delay<0, .(cnt=.N)]
apply(subset(flights_df, month==6&origin=='JFK', select=c('arr_delay', 'dep_delay')), 2, mean)
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
filter(month==6&origin=='JFK') %>%
summarise(avg_arrdelay=mean(arr_delay),
avg_depdelay=mean(dep_delay))
flights_dt[month==6&origin=='JFK', .(mean_arr=mean(arr_delay), mean_dep=mean(dep_delay))]
flights_dt[arr_delay+dep_delay<0, .(.N)]
#8-1. 지연시간의 합이 0 미만인 비행이 몇 번인지 출력
nrow(flights_df[flights_df$arr_delay+flights_df$dep_delay<0,])
flights_dt[month==6&origin=='JFK', .(mean_arr=mean(arr_delay), mean_dep=mean(dep_delay))]
flights_dt[month==6&origin=='JFK', .(mean(arr_delay), mean(dep_delay))]
#10. 9번의 결과에 title에 mean_arr, mean_dep로 출력
flights_df %>%
filter(origin=='JFK') %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
#10. 9번의 결과에 title에 mean_arr, mean_dep로 출력
flights_df %>%
filter(month==6&origin=='JFK') %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
flights_dt[month==6&origin=='JFK', .(mean_arr=mean(arr_delay), mean_dep=mean(dep_delay))]
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
filter(month==6) %>%
summarise(n=n())
nrow(subset(flights_df, flights_df$month==6))
flights_dt[month==6, .(.N)]
#12. JFK 공항의 6월 운항 데이터 중 arr_delay열과 dep_delay열을 출력
flights_df %>%
filter(origin=='JFK'&month==6) %>%
select(c('arr_delay', 'dep_delay'))
head(subset(flights_df, origin=='JFK'&month==6)[,c('arr_delay', 'dep_delay')])
head(subset(flights_df, origin=='JFK'&month==6, select=c('arr_delay', 'dep_delay')))
flights_dt[origin=='JFK'&month==6, .(arr_delay, dep_delay)]
flights_dt[origin=='JFK'&month==6, list(arr_delay, dep_delay)]
head(subset(flights_df, origin=='JFK'&month==6)[,c(-5,-7)])
flights_dt[origin=='JFK'&month==6, c('arr_delay', 'dep_delay')]
subset(flights_df, origin=='JFK'&month==6)[,-c(5,7)]
flights_dt[origin=='JFK'&month==6, -c('arr_delay', 'dep_delay')]
flights_df %>%
group_by(origin) %>%
summarise(n=n())
flights_dt[, .(.N), .(origin)]
flgihts_dt[, .(.N), by=.(origin)]
flights_dt[, .(.N), by=.(origin)]
flights_dt[, .(.N), keyby=.(origin)]
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin) %>%
summarise(n=n())
table(subset(flights_df, carrier=='AA')[,c('origin')])
table(subset(flights_df, carrier=='AA', select=origin)
table(subset(flights_df, carrier=='AA', select=origin))
table(subset(flights_df, carrier=='AA', select=origin))
flights_dt(carrier=='AA', .(.N), .(origin))
flights_dt[, .(.N), keyby=.(origin)] #origin 오름차순(E->J->L순)
flights_dt[carrier=='AA', .(.N), .(origin)]
flights[, .(.N), (origin, dest)]
flights[, .(.N), .(origin, dest)]
flights_dt[, .(.N), .(origin, dest)]
table(flights_df$origin, flights_df$dest)
flights_dt[, .(.N), .(origin, dest)]
#17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
table(subset(flights_df, carrier=='AA')[,c('origin', 'dest')])
table(subset(flights_df, carrier=='AA', select=c('origin', 'dest'))
table(subset(flights_df, carrier=='AA', select=c('origin', 'dest')))
table(subset(flights_df, carrier=='AA', select=c('origin', 'dest')))
#17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
table(subset(flights_df, carrier=='AA')[,c('origin', 'dest')])
flights_dt[carrier=='AA', .(.N), .(origin, dest)]
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin, dest, month) %>%
summarise(mean(arr_delay), mean(dep_delay))
flights_dt[carrier=='AA', .(mean(arr_delay), mean(dep_delay)), .(origin, dest, month)]
library(doBy)
summaryBy(arr_delay+dep_delay~origin+dest+month, subset(flights_df, carrier=='AA'), FUN=mean)
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin, dest, month) %>%
summarise(mean(arr_delay), mean(dep_delay))
flights_dt[carrier=='AA', .(mean(arr_delay), mean(dep_delay)), .(origin, dest, month)]
flights_dt[carrier=='AA', .(avg_arr=mean(arr_delay), avg_dep=mean(dep_delay)), .(origin, dest, month)]
#19. dep_delay>0가 참이거나 거짓, arr_delay>0가 참이거나 거짓인 각각의 비행횟수
flights_df %>%
mutate(dep_n=ifelse(dep_delay>0, TRUE, FALSE),
arr_n=ifelse(arr_delay>0, TRUE, FALSE)) %>%
summarise(table(dep_n), table(arr_n)) #1행 false, 2행 true
df <- data.frame(dep_n=ifelse(flights_df$dep_delay>0, TRUE, FALSE),
arr_n=ifelse(flights_df$arr_delay>0, TRUE, FALSE))
table(df$dep_n); table(df$arr_n)
table(flights_df$dep_delay>0, flights_df$arr_delay>0)
flights_dt[, .(.N), by=.(dep_delay>0, arr_delay>0)]
#20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬)
flights_df %>%
filter(origin=='JFK') %>%
group_by(month) %>%
summarise(max(dep_delay)) %>%
arrange(month)
df <- subset(flights_df, flights_df$origin=='JFK', select=c('month', 'dep_delay'))
tapply(df$dep_delay, df$month, max)
flights_dt[origin=='JFK', .(max_dep=max(dep_delay)), .(month)]
flights_dt[origin=='JFK'&month==6, !c('arr_delay', 'dep_delay')]
flights_df[order(-month)]
flights_dt[order(-month)]
library(ggplot2)
ggplot(data=mtcars, aes(x=wt, y=mpg))
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point()
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point() +
labs(title="그래프 첫 예제")
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point() +
labs(title="그래프 첫 예제") +
geom_smooth()
# 1.3 그래프 파라미터: bty(박스 유형), ...
# (1) par(): 그래프를 조정하거나 특성을 지정, par()함수의 리턴값은 실행 전 특성
?cars
plot(cars)
oldPar <-par(bty='L')
plot(cars)
plot(iris)
par(oldPar)
plot(cars)
#fit <- lm(cars$dist~cars$speed)
fit <-lm(dist~speed, data=cars)
fit
abline(fit, col=2)
#par함수의 다른 파라미터 사용
x <-1:100
y1 <-rnorm(100) #표준정규분포(평균0, 표준편차1) 수 100개 임의추출
y2 <-rnorm(100)+100
oldPar <-par(mar=c(5,5,5,5))
?par
plot(x,y1, pch=0)
plot(x,y1, pch=1)
plot(x,y1, pch=3)
plot(x,y1, pch=0)
plot(x,y1, pch=0, type="b")
colors()
plot(x,y1, pch=0, type="b", col="turquoise")
plot(x,y1, pch=0, type="b", col="turquoise3")
plot(x,y1, pch=0, type="b", col="turquoise3",
ylim=c(-8,2))
plot(x,y1, pch=0, type="b", col="steelblue",
ylim=c(-8,2))
plot(x,y1, pch=0, type="b", col="steelblue2",
ylim=c(-8,2))
plot(x,y1, pch=0, type="b", col="springgreen2",
ylim=c(-8,2))
plot(x,y1, pch=0, type="b", col="springgreen",
ylim=c(-8,2))
plot(x,y1, pch=0, type="b", col="springgreen3",
ylim=c(-8,2))
plot(x,y1, pch=0, type="b", col="springgreen3",
ylim=c(-8,2), yaxt="n")
plot(x,y1, pch=0, type="b", col="springgreen3",
ylim=c(-8,2), yaxt="n", byt="n")
plot(x,y1, pch=0, type="b", col="springgreen3",
ylim=c(-8,2), yaxt="n", bty="n")
plot(x,y1, pch=0, type="b", col="springgreen3",
ylim=c(-8,2), yaxt="n", bty="n", ylab="")
#pch; 점모양 0:네모, 1:원, 2:세모, 3:십자, 4:x, 5:다이아몬드 등
#type; p:점, l:선, b:점&선, o:점&선 겹치게, h:히스토그램 s:계단모양 n:좌표 찍지 않음
#col; 1:black, 2:red, 3:green, 4:blue, 5:cyan, 6:purple, 7:yellow, 8:gray
#ylim, xlim; y축 눈금, x축 눈금 조정
#yaxt;
?yaxt
#pch; 점모양 0:네모, 1:원, 2:세모, 3:십자, 4:x, 5:다이아몬드 등
#type; p:점, l:선, b:점&선, o:점&선 겹치게, h:히스토그램 s:계단모양 n:좌표 찍지 않음
#col; 1:black, 2:red, 3:green, 4:blue, 5:cyan, 6:purple, 7:yellow, 8:gray
#ylim, xlim; y축 눈금, x축 눈금 조정
#yaxt;
??yaxt
#pch; 점모양 0:네모, 1:원, 2:세모, 3:십자, 4:x, 5:다이아몬드 등
#type; p:점, l:선, b:점&선, o:점&선 겹치게, h:히스토그램 s:계단모양 n:좌표 찍지 않음
#col; 1:black, 2:red, 3:green, 4:blue, 5:cyan, 6:purple, 7:yellow, 8:gray
#ylim, xlim; y축 눈금, x축 눈금 조정
#yaxt; y축 눈금 yaxt="n"; y축 눈금 없애기
#bty; 박스타입 o, L, 7, c, u, n(박스 없음)
axis(side=2, at=c(-2,0,2))
#side; 1하 2좌 3상 4우
#at; 위치
mtext("green line(y1)"), side=2, line=2, at=0, col=3)
#side; 1하 2좌 3상 4우
#at; 위치
mtext("green line(y1)", side=2, line=2, at=0, col=3)
?points
par(new=TRUE)
plot(x, y2, pch=1, type='b', col='tan3', yaxt='n', ylim=c(98,108), ylab='', bty='n')
axis(side=4, at=c(98,100,102))
mtext("tan line(y2)", side=4, line=2, at=100, col="tan3")
par(oldPar)
# 2. 고수준 그래프 함수
# 2.1 plot: type에 따라 여러 유형의 그래프를 그림. 산점도 그래프 함수
plot(cars, main="Speed and Stopping Distance of Cars",
xlab="speed(mph)")
# 2. 고수준 그래프 함수
# 2.1 plot: type에 따라 여러 유형의 그래프를 그림. 산점도 그래프 함수
plot(cars, main="Speed and Stopping Distance of Cars",
xlab="speed(mph)", ylab="stopping distances(ft)", las=1)
# 2. 고수준 그래프 함수
# 2.1 plot: type에 따라 여러 유형의 그래프를 그림. 산점도 그래프 함수
plot(cars, main="Speed and Stopping Distance of Cars",
xlab="speed(mph)", ylab="stopping distances(ft)", las=3)
# 2. 고수준 그래프 함수
# 2.1 plot: type에 따라 여러 유형의 그래프를 그림. 산점도 그래프 함수
plot(cars, main="Speed and Stopping Distance of Cars",
xlab="speed(mph)", ylab="stopping distances(ft)", las=1)
# 2. 고수준 그래프 함수
# 2.1 plot: type에 따라 여러 유형의 그래프를 그림. 산점도 그래프 함수
plot(cars, main="Speed and Stopping Distance of Cars",
xlab="speed(mph)", ylab="stopping distances(ft)", las=0)
# 2. 고수준 그래프 함수
# 2.1 plot: type에 따라 여러 유형의 그래프를 그림. 산점도 그래프 함수
plot(cars, main="Speed and Stopping Distance of Cars",
xlab="speed(mph)", ylab="stopping distances(ft)", las=1)
#las; 축 눈금 라벨 방향 0: 축과 평행, 1:평행, 2:축과 수직, 3:수직
?plot
#2행3열로 그래프 영역 분리하고 type 속성에 따른 그래프 그리기
oldPar <-par(mfrow=c(2,3))
plot(cars, type="p", main="p타입")
plot(cars, type="l", main="l타입")
plot(cars, type="b", main="b타입")
plot(cars, type="o", main="o타입")
plot(cars, type="s", main="s타입")
plot(cars, type="n", main="n타입")
par(oldPar)
# 2.2 barplot; 막대 그래프
VADeaths
barplot(VADeaths, main="버지니아주 사망률", font=2,
border="red", legend=rownames(VADeaths),
angle=c(10, 30, 50, 70, 120))
barplot(VADeaths, main="버지니아주 사망률", font=2,
border="red", legend=rownames(VADeaths),
angle=c(10, 30, 50, 70, 120),
density=50)
barplot(VADeaths, main="버지니아주 사망률", font=2,
border="red", legend=rownames(VADeaths),
angle=c(10, 30, 50, 70, 120),
density=50, col=terrain.colors(5))
barplot(VADeaths, main="버지니아주 사망률", font=2,
border="red", legend=rownames(VADeaths),
angle=c(10, 30, 50, 70, 120),
density=50, col=terrain.colors(5), beside=TRUE)
barplot(VADeaths, main="버지니아주 사망률", font=2,
border="red", legend=rownames(VADeaths),
angle=c(10, 30, 50, 70, 120),
density=50, col=terrain.colors(5), beside=F)
barplot(VADeaths, main="버지니아주 사망률", font=2,
border="red", legend=rownames(VADeaths),
angle=c(10, 30, 50, 70, 120),
density=50, col=terrain.colors(5), beside=T)
# 2.3 boxplot: 사분위수 그래프
InsectSprays
boxplot(InsectSprays$count)
boxplot(count~spray, data=InsectSprays, colo="steelblue")
boxplot(count~spray, data=InsectSprays, col="steelblue")
tapply(InsectSprays$count, InsectSprays$spray, median)
# 2.4 hist: 히스토그램(도수 분포표)
x <-c(1,1,2,2,2,3,4,4)
hist(x)
h <-hist(x, breaks=0:4, las=1)
#breaks; 구간(눈금 구간)
h
text(h$mids, g$counts, h$counts)
text(h$mids, h$counts, h$counts)
text(h$mids, h$counts, h$counts, adj=c(0.5, -.2), col="1")
text(h$mids, h$counts, h$counts, adj=c(0,0), col='red')
text(h$mids, h$counts, h$counts, adj=c(1,0), col='blue')
text(h$mids, h$counts, h$counts, adj=c(0,1), col='green')
text(h$mids, h$counts, h$counts, adj=c(1,1), col='orange')
class(islands)
is.vector(islands)
hist(islands)
hist(sqrt(islands))
hist(sqrt(islands), breaks=c(2,35,70,100,140))
# 2.5 pie
pie.sales <-c(0.1, 0.3, 0.2, 0.15, 0.1, 0.15)
sum(pie.sales)
names(pie.sales) <-c("c","java","python","R","oracle","hadoop")
pie.sales
pie(pie.sales)
pie(pie.sales, clockwise = T)
pie(pie.sales, clockwise = T, #시계방향
col=c('red', 'orange', 'yellow', 'green', 'blue', 'purple'))
pie(pie.sales, clockwise = T)
pie(pie.sales, clockwise = T, col=topi.colors(6))
pie(pie.sales, clockwise = T, col=topo.colors(6))
# 2.6 mosaicplot
?Titanic
class(Titanic)
Titanic
mosaicplot(Titanic, color=T)
mosaicplot(~Sex+Age+Survived, data=Titanic, color=T)
# 3. 저수준 그래프 함수
# 3.1 points
plot(-5:5, -5:5, type="n")
# 3. 저수준 그래프 함수
# 3.1 points
plot(-4:4, -4:4, type="n")
points(2,2, col="red")
rnorm(100)
points(rnorm(100), rnorm(100), col="tan3", pch=3)
# 3.2 lines
plot(cars, main="speed & distance")
fit <-lm(dist~speed, cars)
fit
lines(cars$speed, 3.932*cars$speed-17.579, col="steelblue")
lines(cars$speed, 3.932*cars$speed-17.579, col="blue")
# 3.3 ablines: 회귀식 선
abline(fit, col="red", lty="dashed")
#lty; 라인 타입(1:solid, 2:dashed, 3:dotted, 4:dotdash, 5:longdash, 6:twodash)
?abline
?par
# 3.4 text(x,y, 출력할 텍스트, 그 외 옵션들)
plot(1:5, 1:5, type="n")
text(3,3, 'A', adj=c(0,0), col="red")
text(2,4, expression(hat(beta)==(x^t*x)^{-1}*X^t*y), cex=2, adj=c(0,0))
library(ggplot2)
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data==mtcars, aes(x=wt, y=mpg))+
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data==mtcars, aes(x=wt, y=mpg))
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data==mtcars, aes(x=wt, y=mpg))
text(2,4, expression(hat(beta)==(x^t*x)^{-1}*X^t*y), cex=2, adj=c(0,0))
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data==mtcars, aes(x=wt, y=mpg))
# 3.4 text(x,y, 출력할 텍스트, 그 외 옵션들)
plot(1:5, 1:5, type="n")
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data==mtcars, aes(x=wt, y=mpg))
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data=mtcars, aes(x=wt, y=mpg))
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(aes(size=mpg, color=cyl))
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(aes(size=mpg, color=cyl)) +
labs(title="wt & Fuel consumption")
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(aes(size=mpg, color=cyl)) +
labs(title="wt & Fuel consumption",
x="weight(1,000lbs)",
y="Fuel consumption(miles per gallon)")
# 1: 그래프 초기화(데이터셋, 변수 설정) - 그래프 표현X
# 2: 그래프의 결과물에 대응하는 geom 함수
# 3: 제목, 부제목, 캡션, 축이름 등 부가요소를 추가
# +기호를 이용해서 함수들 연결방식으로 그래프 생성
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(aes(size=mpg, color=cyl)) +
labs(title="wt & Fuel consumption",
x="weight(1,000lbs)",
y="Fuel consumption(miles per gallon)",
subtitle="(차량 무게와 연비와의 관계)",
caption="source: mpg datasets")
#1. x축: iris$Petal.Width, y축: iris$Petal.Length 값을 나타내는 산점도, 종에 따라 다른 색
ggplot(data=iris, aes(x=Petal.Width, y=Petal.Length)) +
geom_point(aes(color=Species))
#2. x축: iris$Petal.Width, y축: iris$Petal.Length 값을 나타내는 산점도
#(단, Species에 따라 산점도의 점을 다른 색, 점의 크기는 Petal.Width의 크기가 클수록 큰 점)
ggplot(data=iris, aes(x=Petal.Width, y=Petal.Length)) +
geom_point(aes(color=Species, size=Petal.Width))
#3. 태양 복사량과 오존량 상관관계 확인 위한 그래프
# airquality$Ozone, airquality$Solar.R 과의 관계(월별 점의 색을 달리 표현)
ggplot(data=airquality, aes(x=Ozone, y=Solar.R))
#3. 태양 복사량과 오존량 상관관계 확인 위한 그래프
# airquality$Ozone, airquality$Solar.R 과의 관계(월별 점의 색을 달리 표현)
ggplot(data=airquality, aes(x=Ozone, y=Solar.R)) +
geom_point(aes(col=Month))
#3. 태양 복사량과 오존량 상관관계 확인 위한 그래프
# airquality$Ozone, airquality$Solar.R 과의 관계(월별 점의 색을 달리 표현)
ggplot(data=airquality, aes(x=Ozone, y=Solar.R)) +
geom_point(aes(col=Month)) +
labs(title="오존량과 태양 복사량의 관계",
caption="source: airquality") +
geom_smooth()
#3. 태양 복사량과 오존량 상관관계 확인 위한 그래프
# airquality$Ozone, airquality$Solar.R 과의 관계(월별 점의 색을 달리 표현)
ggplot(data=airquality, aes(x=Ozone, y=Solar.R)) +
geom_point(aes(col=Month)) +
labs(title="오존량과 태양 복사량의 관계",
caption="source: airquality") +
geom_smooth(method="lm")
?geom_smooth
?geom_smooth
ggplot(data=mtcars, aes(x=wt, y=mpg))
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=25, color="yellowgreen", bg="red")
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellowgreen", bg="red")
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red")
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars))
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0, vjust=0)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0, vjust=0, size=3)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0, vjust=0, size=3, nudge_y=0.5)
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0, vjust=0, size=3, nudge_y=0.5) +
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0, vjust=0, size=3, nudge_y=0.5) +
labs(title="차량 무게와 연비와의 관계",
x="차량 무게(1,000lbs)",
y="연비(miles per gallon)",
subtitle="(부제목)",
caption="참조:datasets의 mtcats")
ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(pch=23, color="yellow", bg="red", size=2, stroke=2) +
geom_smooth(method="lm", color="red", size=2, linetype=2) +
geom_text(label=rownames(mtcars), hjust=0, vjust=0, size=3, nudge_y=0.5) +
labs(title="차량 무게와 연비와의 관계",
x="차량 무게(1,000lbs)",
y="연비(miles per gallon)",
subtitle="(부제목)",
caption="참조:datasets의 mtcats")
# 4.2 히스토그램
head(mtcars)
dim(mtcars)
str(mtcars)
mtcars$cyl <-factior(mtcars$cyl, levels=c(4,6,8),
labels=c('4 cylinders', '6 cylinders', '8 cylinders'))
mtcars$cyl <-factor(mtcars$cyl, levels=c(4,6,8),
labels=c('4 cylinders', '6 cylinders', '8 cylinders'))
head(mtcars)
str(mtcars$cyl)
ggplot(data=mtcars, aes(x=mpg))
ggplot(data=mtcars, aes(x=mpg)) +
geom_histogram()
ggplot(data=mtcars, aes(x=mpg)) +
geom_histogram() +
facet_grid(cyl~.)
ggplot(data=mtcars, aes(x=mpg)) +
geom_histogram() +
facet_grid(cyl~.) + #복수 패널에 그리기
labs(title="실린더에 따른 연비 히스토그램",
x="연비", y="횟수")
?facet_grid
